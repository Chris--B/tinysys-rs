#![allow(bad_style)]
/* automatically generated by rust-bindgen 0.71.1 */

pub type __darwin_wchar_t = ::core::ffi::c_int;
pub type wchar_t = __darwin_wchar_t;
pub type intmax_t = ::core::ffi::c_long;
pub type uintmax_t = ::core::ffi::c_ulong;
unsafe extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::core::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::core::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::core::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::core::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
pub const EAPUSampleRate_ASR_44_100_Hz: EAPUSampleRate = 0;
pub const EAPUSampleRate_ASR_22_050_Hz: EAPUSampleRate = 1;
pub const EAPUSampleRate_ASR_11_025_Hz: EAPUSampleRate = 2;
pub const EAPUSampleRate_ASR_Halt: EAPUSampleRate = 3;
pub type EAPUSampleRate = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn APUAllocateBuffer(_size: u32) -> *mut u8;
}
unsafe extern "C" {
    pub fn APUSetBufferSize(audioBufferSize: u32);
}
unsafe extern "C" {
    pub fn APUStartDMA(audioBufferAddress16byteAligned: u32);
}
unsafe extern "C" {
    pub fn APUSetSampleRate(sampleRate: EAPUSampleRate);
}
unsafe extern "C" {
    pub fn E32ReadTime() -> u64;
}
unsafe extern "C" {
    pub fn E32ReadCycles() -> u64;
}
unsafe extern "C" {
    pub fn E32ReadRetiredInstructions() -> u64;
}
unsafe extern "C" {
    pub fn E32SetTimeCompare(future: u64);
}
unsafe extern "C" {
    pub fn ClockToMs(clk: u64) -> u32;
}
unsafe extern "C" {
    pub fn ClockToUs(clk: u64) -> u32;
}
unsafe extern "C" {
    pub fn ClockMsToHMS(ms: u32, hours: *mut u32, minutes: *mut u32, seconds: *mut u32);
}
unsafe extern "C" {
    pub fn E32Sleep(ticks: u64);
}
unsafe extern "C" {
    pub fn E32WriteMemMappedCSR(_hart: u32, _csr: u32, _value: u32);
}
unsafe extern "C" {
    pub fn E32ReadMemMappedCSR(_hart: u32, _csr: u32) -> u32;
}
unsafe extern "C" {
    pub fn E32SetupCPU(hartid: u32, workerThread: *mut ::core::ffi::c_void);
}
unsafe extern "C" {
    pub fn E32ResetCPU(hartid: u32);
}
unsafe extern "C" {
    pub fn E32BeginCriticalSection();
}
unsafe extern "C" {
    pub fn E32EndCriticalSection();
}
unsafe extern "C" {
    pub fn E32GetScratchpad() -> u32;
}
unsafe extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::core::ffi::c_int,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn getcwd(buf: *mut ::core::ffi::c_char, size: usize) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn chdir(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ReadAxisState(scandata: *mut u8);
}
unsafe extern "C" {
    pub fn ProcessAxisState(scandata: *mut u8);
}
unsafe extern "C" {
    pub fn ReadButtonState(scandata: *mut u8);
}
unsafe extern "C" {
    pub fn ProcessButtonState(scandata: *mut u8);
}
unsafe extern "C" {
    pub fn JoystickReadState(_axisData: *mut f32, _buttonData: *mut u16);
}
unsafe extern "C" {
    pub fn ReadKeyState(scandata: *mut u8);
}
unsafe extern "C" {
    pub fn ProcessKeyState(scandata: *mut u8);
}
unsafe extern "C" {
    pub fn KeyboardScanCodeToASCII(scanCode: u8, lowercase: u8) -> u8;
}
unsafe extern "C" {
    pub fn KeyRingBufferReset();
}
unsafe extern "C" {
    pub fn KeyRingBufferRead(pvDest: *mut ::core::ffi::c_void, cbDest: u32) -> u32;
}
unsafe extern "C" {
    pub fn KeyRingBufferWrite(pvSrc: *const ::core::ffi::c_void, cbSrc: u32) -> u32;
}
unsafe extern "C" {
    pub fn LEDGetState() -> u32;
}
unsafe extern "C" {
    pub fn LEDSetState(state: u32);
}
pub type va_list = __builtin_va_list;
unsafe extern "C" {
    pub fn mini_vsnprintf(
        buffer: *mut ::core::ffi::c_char,
        buffer_len: ::core::ffi::c_uint,
        fmt: *const ::core::ffi::c_char,
        va: va_list,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn mini_snprintf(
        buffer: *mut ::core::ffi::c_char,
        buffer_len: ::core::ffi::c_uint,
        fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn c_isspace(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn c_isdigit(c: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn c_sscanf(
        buff: *const ::core::ffi::c_char,
        format: *mut ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn c_getch() -> ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn c_getbackch(b: ::core::ffi::c_char) -> bool;
}
unsafe extern "C" {
    pub fn getch() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn SDCardStartup() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn SDIOControl(cmd: u8, buffer: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn SDReadMultipleBlocks(
        datablock: *mut u8,
        numblocks: u32,
        blockaddress: u32,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn SDWriteMultipleBlocks(
        datablock: *const u8,
        numblocks: u32,
        blockaddress: u32,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn SerialInRingBufferReset();
}
unsafe extern "C" {
    pub fn SerialInRingBufferRead(pvDest: *mut ::core::ffi::c_void, cbDest: u32) -> u32;
}
unsafe extern "C" {
    pub fn SerialInRingBufferWrite(pvSrc: *const ::core::ffi::c_void, cbSrc: u32) -> u32;
}
pub type taskfunc = ::core::option::Option<unsafe extern "C" fn()>;
pub const ETaskState_TS_UNKNOWN: ETaskState = 0;
pub const ETaskState_TS_PAUSED: ETaskState = 1;
pub const ETaskState_TS_RUNNING: ETaskState = 2;
pub const ETaskState_TS_TERMINATING: ETaskState = 3;
pub const ETaskState_TS_TERMINATED: ETaskState = 4;
pub type ETaskState = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STask {
    pub HART: u32,
    pub runLength: u32,
    pub state: ETaskState,
    pub exitCode: u32,
    pub regs: [u32; 32usize],
    pub name: [::core::ffi::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of STask"][::core::mem::size_of::<STask>() - 160usize];
    ["Alignment of STask"][::core::mem::align_of::<STask>() - 4usize];
    ["Offset of field: STask::HART"][::core::mem::offset_of!(STask, HART) - 0usize];
    ["Offset of field: STask::runLength"][::core::mem::offset_of!(STask, runLength) - 4usize];
    ["Offset of field: STask::state"][::core::mem::offset_of!(STask, state) - 8usize];
    ["Offset of field: STask::exitCode"][::core::mem::offset_of!(STask, exitCode) - 12usize];
    ["Offset of field: STask::regs"][::core::mem::offset_of!(STask, regs) - 16usize];
    ["Offset of field: STask::name"][::core::mem::offset_of!(STask, name) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STaskContext {
    pub tasks: [STask; 4usize],
    pub currentTask: i32,
    pub numTasks: i32,
    pub interceptUART: i32,
    pub kernelError: i32,
    pub kernelErrorData: [i32; 3usize],
    pub hartID: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of STaskContext"][::core::mem::size_of::<STaskContext>() - 672usize];
    ["Alignment of STaskContext"][::core::mem::align_of::<STaskContext>() - 4usize];
    ["Offset of field: STaskContext::tasks"][::core::mem::offset_of!(STaskContext, tasks) - 0usize];
    ["Offset of field: STaskContext::currentTask"]
        [::core::mem::offset_of!(STaskContext, currentTask) - 640usize];
    ["Offset of field: STaskContext::numTasks"]
        [::core::mem::offset_of!(STaskContext, numTasks) - 644usize];
    ["Offset of field: STaskContext::interceptUART"]
        [::core::mem::offset_of!(STaskContext, interceptUART) - 648usize];
    ["Offset of field: STaskContext::kernelError"]
        [::core::mem::offset_of!(STaskContext, kernelError) - 652usize];
    ["Offset of field: STaskContext::kernelErrorData"]
        [::core::mem::offset_of!(STaskContext, kernelErrorData) - 656usize];
    ["Offset of field: STaskContext::hartID"]
        [::core::mem::offset_of!(STaskContext, hartID) - 668usize];
};
unsafe extern "C" {
    pub fn TaskGetContext(_hartid: u32) -> *mut STaskContext;
}
unsafe extern "C" {
    pub fn TaskGetSharedMemory() -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn TaskAdd(
        _ctx: *mut STaskContext,
        _name: *const ::core::ffi::c_char,
        _task: taskfunc,
        _initialState: ETaskState,
        _runLength: u32,
        _stackAddress: u32,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn TaskSwitchToNext(_ctx: *mut STaskContext) -> u32;
}
unsafe extern "C" {
    pub fn TaskExitCurrentTask(_ctx: *mut STaskContext);
}
unsafe extern "C" {
    pub fn TaskExitTaskWithID(_ctx: *mut STaskContext, _taskid: u32, _signal: u32);
}
unsafe extern "C" {
    pub fn TaskYield();
}
unsafe extern "C" {
    pub fn TaskSetState(_ctx: *mut STaskContext, _taskid: u32, _state: ETaskState);
}
unsafe extern "C" {
    pub fn TaskGetState(_ctx: *mut STaskContext, _taskid: u32) -> ETaskState;
}
unsafe extern "C" {
    pub fn TaskGetPC(_ctx: *mut STaskContext, _taskid: u32) -> u32;
}
unsafe extern "C" {
    pub fn UARTGetStatus() -> u32;
}
unsafe extern "C" {
    pub fn UARTSetControl(ctl: u32);
}
unsafe extern "C" {
    pub fn UARTReceiveData() -> u32;
}
unsafe extern "C" {
    pub fn UARTSendByte(data: u8);
}
unsafe extern "C" {
    pub fn UARTSendBlock(data: *mut u8, numBytes: u32);
}
unsafe extern "C" {
    pub fn UARTPrintf(fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
pub const EVideoMode_EVM_320_Wide: EVideoMode = 0;
pub const EVideoMode_EVM_640_Wide: EVideoMode = 1;
pub const EVideoMode_EVM_Count: EVideoMode = 2;
pub type EVideoMode = ::core::ffi::c_uint;
pub const EColorMode_ECM_8bit_Indexed: EColorMode = 0;
pub const EColorMode_ECM_16bit_RGB: EColorMode = 1;
pub const EColorMode_ECM_Count: EColorMode = 2;
pub type EColorMode = ::core::ffi::c_uint;
pub const EVideoScanoutEnable_EVS_Disable: EVideoScanoutEnable = 0;
pub const EVideoScanoutEnable_EVS_Enable: EVideoScanoutEnable = 1;
pub const EVideoScanoutEnable_EVS_Count: EVideoScanoutEnable = 2;
pub type EVideoScanoutEnable = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVideoContext {
    pub m_vmode: EVideoMode,
    pub m_cmode: EColorMode,
    pub m_scanEnable: EVideoScanoutEnable,
    pub m_strideInWords: u32,
    pub m_scanoutAddressCacheAligned: u32,
    pub m_cpuWriteAddressCacheAligned: u32,
    pub m_graphicsWidth: u32,
    pub m_graphicsHeight: u32,
    pub m_consoleWidth: u16,
    pub m_consoleHeight: u16,
    pub m_cursorX: u16,
    pub m_cursorY: u16,
    pub m_consoleUpdated: u16,
    pub m_caretX: u16,
    pub m_caretY: u16,
    pub m_consoleColor: u8,
    pub m_caretBlink: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EVideoContext"][::core::mem::size_of::<EVideoContext>() - 48usize];
    ["Alignment of EVideoContext"][::core::mem::align_of::<EVideoContext>() - 4usize];
    ["Offset of field: EVideoContext::m_vmode"]
        [::core::mem::offset_of!(EVideoContext, m_vmode) - 0usize];
    ["Offset of field: EVideoContext::m_cmode"]
        [::core::mem::offset_of!(EVideoContext, m_cmode) - 4usize];
    ["Offset of field: EVideoContext::m_scanEnable"]
        [::core::mem::offset_of!(EVideoContext, m_scanEnable) - 8usize];
    ["Offset of field: EVideoContext::m_strideInWords"]
        [::core::mem::offset_of!(EVideoContext, m_strideInWords) - 12usize];
    ["Offset of field: EVideoContext::m_scanoutAddressCacheAligned"]
        [::core::mem::offset_of!(EVideoContext, m_scanoutAddressCacheAligned) - 16usize];
    ["Offset of field: EVideoContext::m_cpuWriteAddressCacheAligned"]
        [::core::mem::offset_of!(EVideoContext, m_cpuWriteAddressCacheAligned) - 20usize];
    ["Offset of field: EVideoContext::m_graphicsWidth"]
        [::core::mem::offset_of!(EVideoContext, m_graphicsWidth) - 24usize];
    ["Offset of field: EVideoContext::m_graphicsHeight"]
        [::core::mem::offset_of!(EVideoContext, m_graphicsHeight) - 28usize];
    ["Offset of field: EVideoContext::m_consoleWidth"]
        [::core::mem::offset_of!(EVideoContext, m_consoleWidth) - 32usize];
    ["Offset of field: EVideoContext::m_consoleHeight"]
        [::core::mem::offset_of!(EVideoContext, m_consoleHeight) - 34usize];
    ["Offset of field: EVideoContext::m_cursorX"]
        [::core::mem::offset_of!(EVideoContext, m_cursorX) - 36usize];
    ["Offset of field: EVideoContext::m_cursorY"]
        [::core::mem::offset_of!(EVideoContext, m_cursorY) - 38usize];
    ["Offset of field: EVideoContext::m_consoleUpdated"]
        [::core::mem::offset_of!(EVideoContext, m_consoleUpdated) - 40usize];
    ["Offset of field: EVideoContext::m_caretX"]
        [::core::mem::offset_of!(EVideoContext, m_caretX) - 42usize];
    ["Offset of field: EVideoContext::m_caretY"]
        [::core::mem::offset_of!(EVideoContext, m_caretY) - 44usize];
    ["Offset of field: EVideoContext::m_consoleColor"]
        [::core::mem::offset_of!(EVideoContext, m_consoleColor) - 46usize];
    ["Offset of field: EVideoContext::m_caretBlink"]
        [::core::mem::offset_of!(EVideoContext, m_caretBlink) - 47usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EVideoSwapContext {
    pub cycle: u32,
    pub readpage: *mut u8,
    pub writepage: *mut u8,
    pub framebufferA: *mut u8,
    pub framebufferB: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EVideoSwapContext"][::core::mem::size_of::<EVideoSwapContext>() - 40usize];
    ["Alignment of EVideoSwapContext"][::core::mem::align_of::<EVideoSwapContext>() - 8usize];
    ["Offset of field: EVideoSwapContext::cycle"]
        [::core::mem::offset_of!(EVideoSwapContext, cycle) - 0usize];
    ["Offset of field: EVideoSwapContext::readpage"]
        [::core::mem::offset_of!(EVideoSwapContext, readpage) - 8usize];
    ["Offset of field: EVideoSwapContext::writepage"]
        [::core::mem::offset_of!(EVideoSwapContext, writepage) - 16usize];
    ["Offset of field: EVideoSwapContext::framebufferA"]
        [::core::mem::offset_of!(EVideoSwapContext, framebufferA) - 24usize];
    ["Offset of field: EVideoSwapContext::framebufferB"]
        [::core::mem::offset_of!(EVideoSwapContext, framebufferB) - 32usize];
};
unsafe extern "C" {
    pub fn VPUAllocateBuffer(_size: u32) -> *mut u8;
}
unsafe extern "C" {
    pub fn VPUGetDimensions(_mode: EVideoMode, _width: *mut u32, _height: *mut u32);
}
unsafe extern "C" {
    pub fn VPUSetDefaultPalette(_context: *mut EVideoContext);
}
unsafe extern "C" {
    pub fn VPUSetVMode(_context: *mut EVideoContext, _scanEnable: EVideoScanoutEnable);
}
unsafe extern "C" {
    pub fn VPUSetScanoutAddress(_context: *mut EVideoContext, _scanOutAddress64ByteAligned: u32);
}
unsafe extern "C" {
    pub fn VPUSetWriteAddress(_context: *mut EVideoContext, _cpuWriteAddress64ByteAligned: u32);
}
unsafe extern "C" {
    pub fn VPUSetPal(_paletteIndex: u8, _red: u32, _green: u32, _blue: u32);
}
unsafe extern "C" {
    pub fn VPUReadVBlankCounter() -> u32;
}
unsafe extern "C" {
    pub fn VPUGetScanline() -> u32;
}
unsafe extern "C" {
    pub fn VPUSwapPages(_vx: *mut EVideoContext, _sc: *mut EVideoSwapContext);
}
unsafe extern "C" {
    pub fn VPUWaitVSync();
}
unsafe extern "C" {
    pub fn VPUPrintString(
        _context: *mut EVideoContext,
        _foregroundIndex: u8,
        _backgroundIndex: u8,
        _x: u16,
        _y: u16,
        _message: *const ::core::ffi::c_char,
        _length: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn VPUConsoleSetColors(
        _context: *mut EVideoContext,
        _foregroundIndex: u8,
        _backgroundIndex: u8,
    );
}
unsafe extern "C" {
    pub fn VPUConsoleClear(_context: *mut EVideoContext);
}
unsafe extern "C" {
    pub fn VPUConsoleSetCursor(_context: *mut EVideoContext, _x: u16, _y: u16);
}
unsafe extern "C" {
    pub fn VPUConsolePrint(
        _context: *mut EVideoContext,
        _message: *const ::core::ffi::c_char,
        _length: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    pub fn VPUConsoleResolve(_context: *mut EVideoContext);
}
unsafe extern "C" {
    pub fn VPUConsoleSetCaret(_context: *mut EVideoContext, _x: u16, _y: u16, _blink: u16);
}
unsafe extern "C" {
    pub fn VPUConsoleClearLine(_context: *mut EVideoContext, _y: u16);
}
unsafe extern "C" {
    pub fn VPUConsoleFillLine(
        _context: *mut EVideoContext,
        _character: ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn VPUConsoleScrollUp(_context: *mut EVideoContext);
}
unsafe extern "C" {
    pub fn VPUClear(_context: *mut EVideoContext, _colorWord: u32);
}
unsafe extern "C" {
    pub fn VPUSetHBlankHandler(_handler: usize);
}
unsafe extern "C" {
    pub fn VPUSetHBlankScanline(_scanline: usize);
}
unsafe extern "C" {
    pub fn VPUHBlankIRQLatchSet();
}
unsafe extern "C" {
    pub fn VPUHBlankIRQLatchReset();
}
unsafe extern "C" {
    pub fn VPUEnableHBlankInterrupt();
}
unsafe extern "C" {
    pub fn VPUDisableHBlankInterrupt();
}
unsafe extern "C" {
    pub fn VPUGetKernelGfxContext() -> *mut EVideoContext;
}
pub type __builtin_va_list = *mut ::core::ffi::c_char;
