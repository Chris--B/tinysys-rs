In archive libtinysys_sdk.a:

apu.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 apu.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000028 APUAllocateBuffer(unsigned int)
00000000         *UND*	00000000 malloc
00000028 g     F .text	00000018 APUSetBufferSize(unsigned int)
00000000 g     O .sdata	00000004 IO_AUDIOOUT
00000040 g     F .text	00000018 APUStartDMA(unsigned int)
00000058 g     F .text	00000018 APUSetSampleRate(EAPUSampleRate)



basesystem.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 basesystem.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000014 E32ReadTime()
00000014 g     F .text	00000014 E32ReadCycles()
00000028 g     F .text	0000004c E32Sleep(unsigned long long)
00000074 g     F .text	0000000c E32ReadRetiredInstructions()
00000080 g     F .text	00000028 ClockToMs(unsigned long long)
00000000         *UND*	00000000 __udivdi3
000000a8 g     F .text	00000024 ClockToUs(unsigned long long)
000000cc g     F .text	0000009c ClockMsToHMS(unsigned int, unsigned int*, unsigned int*, unsigned int*)
00000168 g     F .text	00000010 E32SetTimeCompare(unsigned long long)
00000178 g     F .text	0000002c E32WriteMemMappedCSR(unsigned int, unsigned int, unsigned int)
000001a4 g     F .text	00000034 E32ReadMemMappedCSR(unsigned int, unsigned int)
000001d8 g     F .text	00000030 E32SetupCPU(unsigned int, void*)
00000208 g     F .text	00000030 E32ResetCPU(unsigned int)
00000238 g     F .text	00000030 E32ClearReset(unsigned int)
00000268 g     F .text	0000000c E32BeginCriticalSection()
00000274 g     F .text	0000000c E32EndCriticalSection()
00000280 g     F .text	00000008 E32GetScratchpad()



core.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 core.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000024 getcwd
00000024 g     F .text	0000001c chdir
00000040 g     F .text	00000088 _brk
00000000         *UND*	00000000 E32ReadMemMappedCSR(unsigned int, unsigned int)
00000000         *UND*	00000000 E32WriteMemMappedCSR(unsigned int, unsigned int, unsigned int)
000000c8 g     F .text	0000008c _sbrk



joystick.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 joystick.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000060 ReadButtonState(unsigned char*)
00000000         *UND*	00000000 SerialInRingBufferRead(void*, unsigned int)
00000060 g     F .text	00000060 ReadAxisState(unsigned char*)
000000c0 g     F .text	0000001c ProcessButtonState(unsigned char*)
000000dc g     F .text	000000b8 ProcessAxisState(unsigned char*)
00000194 g     F .text	00000014 UpdateJoystickState()
000001a8 g     F .text	0000000c JoystickGetState()



keyboard.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000140 ProcessKeyState(unsigned char*)
00000100 g     O .data	00000100 scantoasciitable_uppercase
00000000 g     O .data	00000100 scantoasciitable_lowercase
00000000         *UND*	00000000 KeyRingBufferWrite(void const*, unsigned int)
00000140 g     F .text	00000024 KeyboardScanCodeToASCII(unsigned char, unsigned char)
00000164 g     F .text	00000074 UpdateKeyboardState(unsigned char*)
000001d8 g     F .text	00000008 KeyboardGetState()
000001e0 g     F .text	00000060 ReadKeyState(unsigned char*)
00000000         *UND*	00000000 SerialInRingBufferRead(void*, unsigned int)



keyringbuffer.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 keyringbuffer.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	0000001c KeyRingBufferReset()
00000000 g     O .sdata	00000004 m_readOffset
00000004 g     O .sdata	00000004 m_writeOffset
0000001c g     F .text	0000008c KeyRingBufferRead(void*, unsigned int)
00000000         *UND*	00000000 memcpy
000000a8 g     F .text	00000094 KeyRingBufferWrite(void const*, unsigned int)



leds.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 leds.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000010 LEDGetState()
00000000 g     O .sdata	00000004 LEDSTATE
00000010 g     F .text	00000010 LEDSetState(unsigned int)



mini-printf.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 mini-printf.c
0000026c l     F .text	00000100 mini_itoa(int, unsigned int, unsigned int, unsigned int, char*, unsigned int)
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	0000026c mini_vsnprintf
00000000         *UND*	00000000 memset
0000036c g     F .text	00000038 mini_snprintf



mini-scanf.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 mini-scanf.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000028 c_isspace(int)
00000028 g     F .text	0000000c c_isdigit(int)
00000034 g     F .text	00000010 c_ishex(int)
00000044 g     F .text	0000002c hext2int(int)
00000070 g     F .text	00000470 c_sscanf(char const*, char*, ...)
000004e0 g     F .text	00000034 c_getch()
00000000 g     O .sbss	00000001 backch
00000000         *UND*	00000000 getch()
00000514 g     F .text	00000018 c_getbackch(char)



sdcard.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 sdcard.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	0000003c CRC16_one(unsigned short, unsigned char)
0000003c g     F .text	00000018 SPITxRx(unsigned char)
00000000 g     O .sdata	00000004 IO_SPIRXTX
00000054 g     F .text	000000d4 SDCmd(SDCardCommand, unsigned int)
00000128 g     F .text	00000024 SDWaitNotBusy()
0000014c g     F .text	00000048 SDResponse1()
00000194 g     F .text	000000b8 SDResponse7(unsigned int*)
0000024c g     F .text	00000058 SDIdle()
00000000         *UND*	00000000 E32Sleep(unsigned long long)
000002a4 g     F .text	00000030 SDCheckVoltageRange()
000002d4 g     F .text	00000070 SDCardInit()
00000344 g     F .text	00000028 SDSetBlockSize512()
0000036c g     F .text	000000dc SDReadSingleBlock(unsigned int, unsigned char*, unsigned char*)
00000000         *UND*	00000000 LEDGetState()
00000000         *UND*	00000000 LEDSetState(unsigned int)
00000448 g     F .text	000000c8 SDReadMultipleBlocks(unsigned char*, unsigned int, unsigned int)
00000510 g     F .text	00000158 SDWriteSingleBlock(unsigned int, unsigned char*)
00000668 g     F .text	000000ac SDWriteMultipleBlocks(unsigned char const*, unsigned int, unsigned int)
00000714 g     F .text	00000008 SDIOControl(unsigned char, void*)
0000071c g     F .text	00000064 SDCardStartup()
00000004 g     O .sdata	00000004 IO_CARDDETECT



serialinringbuffer.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 serialinringbuffer.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	0000001c SerialInRingBufferReset()
00000000 g     O .sdata	00000004 m_si_readOffset
00000004 g     O .sdata	00000004 m_si_writeOffset
0000001c g     F .text	0000008c SerialInRingBufferRead(void*, unsigned int)
00000000         *UND*	00000000 memcpy
000000a8 g     F .text	00000094 SerialInRingBufferWrite(void const*, unsigned int)



task.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 task.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	00000020 TaskGetContext(unsigned int)
00000020 g     F .text	00000018 TaskGetSharedMemory()
00000038 g     F .text	00000014 TaskSetState(STaskContext*, unsigned int, ETaskState)
0000004c g     F .text	00000014 TaskGetState(STaskContext*, unsigned int)
00000060 g     F .text	00000014 TaskGetPC(STaskContext*, unsigned int)
00000074 g     F .text	00000044 TaskAdd(STaskContext*, char const*, void (*)(), ETaskState, unsigned int, unsigned int)
000000b8 g     F .text	00000018 TaskExitCurrentTask(STaskContext*)
000000d0 g     F .text	00000028 TaskExitTaskWithID(STaskContext*, unsigned int, unsigned int)
000000f8 g     F .text	00000010 TaskYield()
00000108 g     F .text	00000020 TaskSwitchToNext(STaskContext*)



uart.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 uart.c
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	0000000c UARTInterceptSetState(int)
0000000c g     F .text	00000010 UARTReceiveData()
00000000 g     O .sdata	00000004 UARTRECEIVE
0000001c g     F .text	00000010 UARTSendByte(unsigned char)
00000004 g     O .sdata	00000004 UARTTRANSMIT
0000002c g     F .text	00000024 UARTSendBlock(unsigned char*, unsigned int)
00000050 g     F .text	00000010 UARTGetStatus()
00000008 g     O .sdata	00000004 UARTSTATUS
00000060 g     F .text	00000010 UARTSetControl(unsigned int)
0000000c g     O .sdata	00000004 UARTCONTROL
00000070 g     F .text	00000080 UARTPrintf(char const*, ...)
00000000  w    F .text._Z13tbm_vsnprintfPcjPKcPv	00000c74 tbm_vsnprintf(char*, unsigned int, char const*, void*)
00000000  w    F .text._Z8tbm_ftoadPcji	000004b8 tbm_ftoa(double, char*, unsigned int, int)
00000000         *UND*	00000000 memset
00000000         *UND*	00000000 __udivdi3
00000000  w    F .text._Z10tbm_ulltoayPcjjPKc	00000158 tbm_ulltoa(unsigned long long, char*, unsigned int, unsigned int, char const*)
00000000         *UND*	00000000 __unorddf2
00000000         *UND*	00000000 __ltdf2
00000000         *UND*	00000000 __fixunsdfdi
00000000         *UND*	00000000 __floatundidf
00000000         *UND*	00000000 __subdf3
00000000         *UND*	00000000 __muldf3
00000000         *UND*	00000000 __gtdf2
00000000         *UND*	00000000 __gedf2
00000000         *UND*	00000000 __ledf2
00000000         *UND*	00000000 __adddf3



vpu.o:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 vpu.c
00000840 l     O .rodata	00000200 vgapalette
00000000 l     O .rodata	00000800 residentfont
00000800 l     O .rodata	00000040 quadexpand
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 g     F .text	0000003c VPUAllocateBuffer(unsigned int)
00000000         *UND*	00000000 malloc
0000003c g     F .text	00000040 VPUSetDefaultPalette(EVideoContext*)
00000000 g     O .sdata	00000004 VPUIO
0000007c g     F .text	00000028 VPUGetDimensions(EVideoMode, unsigned int*, unsigned int*)
000000a4 g     F .text	000000a4 VPUSetVMode(EVideoContext*, EVideoScanoutEnable)
00000148 g     F .text	00000018 VPUSetScanoutAddress(EVideoContext*, unsigned int)
00000160 g     F .text	00000008 VPUSetWriteAddress(EVideoContext*, unsigned int)
00000168 g     F .text	0000003c VPUSetPal(unsigned char, unsigned int, unsigned int, unsigned int)
000001a4 g     F .text	00000014 VPUConsoleSetColors(EVideoContext*, unsigned char, unsigned char)
000001b8 g     F .text	00000064 VPUConsoleClear(EVideoContext*)
00000000         *UND*	00000000 memset
0000021c g     F .text	0000000c VPUConsoleSetCursor(EVideoContext*, unsigned short, unsigned short)
00000228 g     F .text	00000010 VPUConsoleSetCaret(EVideoContext*, unsigned short, unsigned short, unsigned short)
00000238 g     F .text	000000b4 VPUConsoleScrollUp(EVideoContext*)
00000000         *UND*	00000000 memcpy
000002ec g     F .text	000001f4 VPUConsolePrint(EVideoContext*, char const*, int)
000004e0 g     F .text	00000164 VPUConsoleFillLine(EVideoContext*, char)
00000644 g     F .text	000001e4 VPUConsoleResolve(EVideoContext*)
00000828 g     F .text	00000070 VPUConsoleClearLine(EVideoContext*, unsigned short)
00000898 g     F .text	00000140 VPUPrintString(EVideoContext*, unsigned char, unsigned char, unsigned short, unsigned short, char const*, int)
000009d8 g     F .text	0000002c VPUClear(EVideoContext*, unsigned int)
00000a04 g     F .text	00000014 VPUReadVBlankCounter()
00000a18 g     F .text	00000018 VPUGetScanline()
00000a30 g     F .text	00000060 VPUSwapPages(EVideoContext*, EVideoSwapContext*)
00000a90 g     F .text	00000020 VPUWaitVSync()
00000ab0 g     F .text	00000008 VPUGetKernelGfxContext()


